name: Build and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run test suite
        run: pytest

  build:
    needs: test
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - name: Windows (x86_64)
            os: windows-latest
            arch: x86_64
          - name: macOS (x86_64)
            os: macos-latest
            arch: x86_64
          - name: Linux (x86_64)
            os: ubuntu-latest
            arch: x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Set build version
        run: |
          python - <<'PY'
          import datetime, os, pathlib
          version = datetime.datetime.utcnow().strftime('%Y.%m.%d')
          pathlib.Path('VERSION').write_text(version)
          with open(os.environ['GITHUB_ENV'], 'a') as fh:
              fh.write(f"VERSION={version}\n")
          PY
        shell: bash
      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Install Inno Setup
        if: matrix.platform.os == 'windows-latest'
        run: |
          choco install -y innosetup
      - name: Generate .ico files
        if: matrix.platform.os == 'windows-latest'
        run: |
          choco install imagemagick.app -y
          magick convert assets\VictoriaBrowser.png -define icon:auto-resize="256,128,64,48,32,16" assets\VictoriaBrowser.ico
          magick convert assets\VictoriaTerminal.png -define icon:auto-resize="256,128,64,48,32,16" assets\VictoriaTerminal.ico
          magick convert assets\Victoria.png -define icon:auto-resize="256,128,64,48,32,16" assets\Victoria.ico
      - name: Build Windows executable
        if: matrix.platform.os == 'windows-latest'
        shell: cmd
        run: scripts\package_win.bat
      - name: Upload build version
        uses: actions/upload-artifact@v4
        with:
          name: build-version-${{ matrix.platform.os }}
          path: VERSION
          if-no-files-found: error
      - name: Generate rounded .icns files
        if: matrix.platform.os == 'macos-latest'
        run: |
          set -e

          generate_icns() {
            local app_name=$1
            local source_png="assets/${app_name}.png"
            local base_image_size=$(identify -format '%w' "${source_png}")
            local rounded_png="assets/${app_name}_rounded.png"
            local iconset_dir="${app_name}.iconset"
            local icns_path="assets/${app_name}.icns"

            echo "--- Generating icon for ${app_name} ---"

            # 1. Create a rounded mask. The corner radius is ~22.2% of the image size.
            echo "Creating rounded mask..."
            local corner_radius=$(echo "$base_image_size * 0.222" | bc)
            convert -size "${base_image_size}x${base_image_size}" xc:none -draw "roundrectangle 0,0,${base_image_size},${base_image_size},${corner_radius},${corner_radius}" mask.png

            # 2. Apply the mask to the source image
            echo "Applying mask to ${source_png}..."
            convert "${source_png}" -matte -bordercolor none -border 0 \( mask.png -alpha off \) -compose DstIn -composite "${rounded_png}"

            # 3. Create the iconset directory
            echo "Creating iconset directory: ${iconset_dir}"
            mkdir -p "${iconset_dir}"

            # 4. Generate different sizes for the iconset
            echo "Generating image sizes..."
            sips -z 16 16   "${rounded_png}" --out "${iconset_dir}/icon_16x16.png"
            sips -z 32 32   "${rounded_png}" --out "${iconset_dir}/icon_16x16@2x.png"
            sips -z 32 32   "${rounded_png}" --out "${iconset_dir}/icon_32x32.png"
            sips -z 64 64   "${rounded_png}" --out "${iconset_dir}/icon_32x32@2x.png"
            sips -z 128 128 "${rounded_png}" --out "${iconset_dir}/icon_128x128.png"
            sips -z 256 256 "${rounded_png}" --out "${iconset_dir}/icon_128x128@2x.png"
            sips -z 256 256 "${rounded_png}" --out "${iconset_dir}/icon_256x256.png"
            sips -z 512 512 "${rounded_png}" --out "${iconset_dir}/icon_256x256@2x.png"
            sips -z 512 512 "${rounded_png}" --out "${iconset_dir}/icon_512x512.png"
            sips -z 1024 1024 "${rounded_png}" --out "${iconset_dir}/icon_512x512@2x.png"

            # 5. Create the .icns file
            echo "Creating .icns file: ${icns_path}"
            iconutil -c icns "${iconset_dir}" -o "${icns_path}"

            # 6. Clean up
            echo "Cleaning up temporary files..."
            rm -f mask.png "${rounded_png}"
            rm -rf "${iconset_dir}"

            echo "--- Finished ${app_name} ---"
          }

          generate_icns "VictoriaBrowser"
          generate_icns "VictoriaTerminal"
          generate_icns "Victoria"
      - name: Build macOS app
        if: matrix.platform.os == 'macos-latest'
        run: |
          bash scripts/package_mac.sh
      - name: Build Linux AppImage
        if: contains(matrix.platform.os, 'ubuntu')
        run: |
          bash scripts/package_linux.sh
      - name: Upload Windows artifact
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: victoria-windows-x86_64
          path: dist/VictoriaSetup.exe
          if-no-files-found: error
      - name: Upload macOS artifact
        if: matrix.platform.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: victoria-macos-x86_64
          path: Victoria-${{ env.VERSION }}.app.zip
          if-no-files-found: error
      - name: Upload Linux artifact
        if: contains(matrix.platform.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: victoria-linux-${{ matrix.platform.arch }}
          path: Victoria-*-${{ matrix.platform.arch }}.AppImage
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build version
        uses: actions/download-artifact@v4
        with:
          name: build-version-windows-latest
          path: release
      - name: Read build version
        run: |
          VERSION=$(tr -d '\r\n' < release/VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          rm release/VERSION
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: victoria-*
          merge-multiple: true
      - name: Rename artifacts with version
        run: |
          mv release/VictoriaSetup.exe "release/Victoria-${VERSION}-Setup.exe"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Victoria v${{ env.VERSION }}
          generate_release_notes: true
          files: release/*
