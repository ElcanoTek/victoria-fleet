name: Build and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run test suite
        run: pytest

  build:
    needs: test
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Set build version
        run: |
          python - <<'PY'
          import datetime, os, pathlib
          version = datetime.datetime.utcnow().strftime('%Y.%m.%d')
          pathlib.Path('VERSION').write_text(version)
          with open(os.environ['GITHUB_ENV'], 'a') as fh:
              fh.write(f"VERSION={version}\n")
          PY
        shell: bash
      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Install Inno Setup
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y innosetup
      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: scripts\package_win.bat
      - name: Upload build version
        uses: actions/upload-artifact@v4
        with:
          name: build-version-${{ matrix.os }}
          path: VERSION
          if-no-files-found: error
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          bash scripts/package_mac.sh
      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: victoria-windows
          path: dist/VictoriaSetup.exe
          if-no-files-found: error
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: victoria-macos
          path: Victoria-${{ env.VERSION }}.app.zip
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build version
        uses: actions/download-artifact@v4
        with:
          name: build-version-windows-latest
          path: release
      - name: Read build version
        run: |
          VERSION=$(tr -d '\r\n' < release/VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          rm release/VERSION
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: victoria-windows
          path: release
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: victoria-macos
          path: release
      - name: Rename artifacts with version
        run: |
          mv release/VictoriaSetup.exe "release/Victoria-${VERSION}-Setup.exe"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Victoria v${{ env.VERSION }}
          generate_release_notes: true
          files: release/*
